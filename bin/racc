#!/usr/bin/env ruby
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the terms of
# the GNU LGPL, Lesser General Public License version 2.1.
# For details of LGPL, see the file "COPYING".

require 'racc/static'
require 'racc/dot_file_generator'
require 'racc/simulated_parser_automaton'
require 'racc/color'
require 'optparse'

include Racc::Color

def main
  dst_file = nil
  output   = :ruby

  debug_parser    = false
  make_executable = false
  rubypath        = nil
  embed_runtime   = false
  superclass      = nil
  check_only      = false
  verbose         = false
  input_tokens    = nil

  profiler = RaccProfiler.new(!!ENV['PROFILE'])

  Racc::Color.enabled = $stderr.tty?

  parser = OptionParser.new
  parser.banner = "Usage: #{File.basename($0)} [options] <input>"
  parser.separator 'General:'
  parser.on('-o', '--output-file=PATH',
            'Output file name [<input>.rb / <input>.dot]') { |name|
    dst_file = name
  }
  parser.on('-V', '--graphviz', 'Output a Graphviz DOT file showing parser states') {
    output = :dot
  }
  parser.on('-C', '--check-only', 'Check syntax and quit immediately') {
    check_only = true
  }
  parser.on('--version', 'Print version and quit') {
    core = Racc::Parser.racc_runtime_type == 'ruby' ? '(ruby core)' : '(c core)'
    puts "racc #{Racc::VERSION}, codename: #{Racc::CODENAME} #{core}"
    exit 0
  }
  parser.on('--copyright', 'Print copyright and quit') {
    puts Racc::COPYRIGHT
    exit 0
  }
  parser.on('--help', 'Print this message and quit') {
    puts parser.help
    exit 1
  }
  parser.separator 'Console output:'
  parser.on('-v', '--verbose', 'Display extra diagnostic information') {
    verbose = true
  }
  parser.on('--[no-]color', 'Force colored output on or off') { |fl|
    Racc::Color.enabled = fl
  }
  parser.separator 'When generating Ruby parser code (the default):'
  parser.on('-t', '--debug', 'Output debugging parser') {
    debug_parser = true
  }
  parser.on('-e', '--executable [RUBYPATH]', 'Output executable parser') { |path|
    executable = true
    rubypath = (path == 'ruby' ? nil : path)
  }
  parser.on('-E', '--embedded', "Embed Racc runtime in output") {
    embed_runtime = true
  }
  parser.on('--superclass=CLASSNAME',
            'Use CLASSNAME as superclass instead of Racc::Parser') { |name|
    superclass = name
  }
  parser.separator 'When generating a DOT state graph:'
  parser.on('--input=TOKENS', 'Show states traversed when parsing TOKENS') { |tokstr|
    input_tokens = tokstr.split(/\s+/)
  }

  begin
    parser.parse!
  rescue OptionParser::ParseError => err
    $stderr.puts err.message
    $stderr.puts parser.help
    exit 1
  end

  fail = lambda do |msg|
    $stderr.puts msg
    $stderr.puts
    $stderr.puts parser.help
    exit 1
  end

  if output == :dot
    fail['racc: -t and -V options are incompatible'] if debug_parser
    fail['racc: -e and -V options are incompatible'] if make_executable
    fail['racc: -E and -V options are incompatible'] if embed_runtime
    fail['racc: --superclass and -V options are incompatible'] if superclass
  end

  if ARGV.empty?
    fail['racc: No input file']
  elsif ARGV.size > 1
    fail['racc: Too many input files']
  end
  input = ARGV[0]

  begin
    if dst_file.nil?
      dst_file = make_filename(input, format_extension(output))
      if File.exist?(dst_file)
        $stderr.puts "racc: '#{dst_file}' already exists. Please use '-o " \
          "#{dst_file}' if you are sure that you want to overwrite this file."
        exit 1
      end
    end

    $stderr.puts 'Parsing grammar file...' if verbose
    result = profiler.section('parse') do
      parser = Racc::GrammarFileParser.new
      parser.parse(File.read(input), File.basename(input))
    end
    if check_only
      $stderr.puts "Syntax is OK for #{input}"
      exit 0
    end

    $stderr.puts 'Generating LALR states...' if verbose
    states = profiler.section('nfa') do
      result.grammar.states.compute_nfa
    end

    $stderr.puts "Resolving #{states.size} states..." if verbose
    profiler.section('dfa') do
      states.compute_dfa
    end

    if output == :ruby
      $stderr.puts 'Creating parser file...' if verbose

      params = result.params.dup
      # Overwrite parameters given by a grammar file with command line options
      params.superclass = superclass if superclass
      if make_executable
        params.make_executable = true
        params.interpreter = rubypath
      end
      params.debug_parser = debug_parser
      params.embed_runtime = embed_runtime

      profiler.section('generation') do
        generator = Racc::ParserFileGenerator.new(states, params)
        generator.generate_parser_file(dst_file)
      end
    elsif output == :dot
      if input_tokens
        tokens    = input_tokens.map { |t| result.grammar.intern(t.to_sym) }
        automaton = Racc::SimulatedParserAutomaton::TraversedStates.new(states)
        tokens.each { |t| automaton.consume(t) }
        automaton.consume(result.grammar.intern(false)) # eof
        generator = Racc::DotFileGenerator.new(states, automaton.traversed)
      else
        generator = Racc::DotFileGenerator.new(states)
      end
      generator.generate_dot_file(dst_file)
    end

    warnings = result.grammar.warnings(verbose)
    if warnings.any?
      $stderr.puts
      $stderr.puts warnings.map(&:to_s).join("\n\n")
      $stderr.puts
      $stderr.puts warning_summary(warnings)
      if !verbose && warnings.any?(&:verbose_details?)
        $stderr.puts "Run with --verbose for more details."
      end
    end

    profiler.report
  rescue Racc::CompileError, Errno::ENOENT, Errno::EPERM => err
    raise if $DEBUG
    lineno = err.message.slice(/\A\d+:/).to_s
    location = lineno.empty? ? bright(input) : bright("#{input}:#{lineno}")
    $stderr.puts "#{red('Error: ')}#{location}: #{err.message.strip}"
    exit 1
  end
end

def make_filename(path, suffix)
  path.sub(/(?:\..*?)?\z/, suffix)
end

def format_extension(format)
  case format
  when :ruby then '.rb'
  when :dot  then '.dot'
  else raise "Unknown format: #{format}"
  end
end

def warning_summary(warnings)
  freq = Hash.new(0)
  warnings.each { |w| freq[w.type] += 1 }
  types = {
    useless_terminal: 'useless terminal',
    useless_nonterminal: 'useless nonterminal',
    useless_prec: "useless '=' precedence declaration",
    sr_conflict: 'shift/reduce conflict',
    rr_conflict: 'reduce/reduce conflict'
  }
  order = [:useless_terminal, :useless_nonterminal, :useless_prec,
           :sr_conflict, :rr_conflict]

  freq.sort_by { |k, v| order.index(k) }.map { |k, v| pluralize(v, types[k]) }.join(', ')
end

def pluralize(count, noun)
  if count == 1
    "#{count} #{noun}"
  else
    "#{count} #{noun}s"
  end
end

class RaccProfiler
  def initialize(really)
    @really = really
    @log = []
  end

  def section(name)
    if @really
      t1 = Process.times.utime
      result = yield
      t2 = Process.times.utime
      @log.push [name, t2 - t1]
      result
    else
      yield
    end
  end

  def report
    return unless @really
    f = $stderr
    total = cumulative_time()
    f.puts '--task-----------+--sec------+---%-'
    @log.each do |name, time|
      f.printf "%-19s %s %3d%%\n", name, pjust(time,4,4), (time/total*100).to_i
    end
    f.puts '-----------------+-----------+-----'
    f.printf "%-20s%s\n", 'total', pjust(total,4,4)
  end

  private

  def cumulative_time
    t = @log.inject(0) {|sum, (name, time)| sum + time }
    t == 0 ? 0.01 : t
  end

  def pjust(num, i, j)
    m = /(\d+)(\.\d+)?/.match(num.to_s)
    str = m[1].rjust(i)
    str.concat m[2].ljust(j+1)[0,j+1] if m[2]
    str
  end
end

main
