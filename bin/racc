#!/usr/bin/env ruby
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the terms of
# the GNU LGPL, Lesser General Public License version 2.1.
# For details of LGPL, see the file "COPYING".

require 'racc/static'
require 'optparse'

def main
  output = nil
  debug_parser = false
  make_logfile = false
  logfilename = nil
  make_executable = false
  rubypath = nil
  embed_runtime = false
  superclass = nil
  check_only = false
  verbose = false
  profiler = RaccProfiler.new(!!ENV['PROFILE'])

  parser = OptionParser.new
  parser.banner = "Usage: #{File.basename($0)} [options] <input>"
  parser.on('-o', '--output-file=PATH',
            'Output file name [<input>.rb]') {|name|
    output = name
  }
  parser.on('-t', '--debug', 'Outputs debugging parser.') {|fl|
    debug_parser = fl
  }
  parser.on('-v', '--verbose',
            'Creates <filename>.output log file.') {|fl|
    make_logfile = fl
    verbose = true
  }
  parser.on('-O', '--log-file=PATH',
            'Log file name [<input>.output]') {|path|
    make_logfile = true
    logfilename = path
  }
  parser.on('-e', '--executable [RUBYPATH]', 'Makes executable parser.') {|path|
    executable = true
    rubypath = (path == 'ruby' ? nil : path)
  }
  parser.on('-E', '--embedded', "Embeds Racc runtime in output.") {
    embed_runtime = true
  }
  parser.on('--superclass=CLASSNAME',
            'Uses CLASSNAME instead of Racc::Parser.') {|name|
    superclass = name
  }
  parser.on('-C', '--check-only', 'Checks syntax and quit immediately.') {|fl|
    check_only = fl
  }
  parser.on('--version', 'Prints version and quits.') {
    core = Racc::Parser.racc_runtime_type == 'ruby' ? '(ruby core)' : '(c core)'
    puts "racc #{Racc::VERSION}, codename: #{Racc::CODENAME} #{core}"
    exit 0
  }
  parser.on('--copyright', 'Prints copyright and quits.') {
    puts Racc::COPYRIGHT
    exit 0
  }
  parser.on('--help', 'Prints this message and quits.') {
    puts parser.help
    exit 1
  }

  begin
    parser.parse!
  rescue OptionParser::ParseError => err
    $stderr.puts err.message
    $stderr.puts parser.help
    exit 1
  end

  if ARGV.empty?
    $stderr.puts 'no input'
    $stderr.puts
    $stderr.puts parser.help
    exit 1
  elsif ARGV.size > 1
    $stderr.puts 'too many inputs'
    $stderr.puts
    $stderr.puts parser.help
    exit 1
  end
  input = ARGV[0]

  begin
    if output.nil?
      output = make_filename(input, '.rb')
      if File.exist?(output)
        $stderr.puts "'#{output}' already exists. Please use '-o #{output}' if " \
          'you are sure that you want to overwrite this file.'
        exit 1
      end
    end

    $stderr.puts 'Parsing grammar file...' if verbose
    result = profiler.section('parse') {
      parser = Racc::GrammarFileParser.new
      parser.parse(File.read(input), File.basename(input))
    }
    if check_only
      $stderr.puts 'syntax ok'
      exit 0
    end

    $stderr.puts 'Generating LALR states...' if verbose
    states = profiler.section('nfa') {
      Racc::States.new(result.grammar).compute_nfa
    }

    $stderr.puts "Resolving #{states.size} states..." if verbose
    profiler.section('dfa') {
      states.compute_dfa
    }

    $stderr.puts 'Creating parser file...' if verbose
    params = result.params.dup
    # Overwrites parameters given by a grammar file with command line options.
    params.superclass = superclass if superclass
    # From command line option
    if make_executable
      params.make_executable = true
      params.interpreter = rubypath
    end
    params.debug_parser = debug_parser
    params.embed_runtime = embed_runtime
    profiler.section('generation') {
      generator = Racc::ParserFileGenerator.new(states, params)
      generator.generate_parser_file(output)
    }

    if make_logfile
      profiler.section('logging') {
        $stderr.puts 'Creating log file...' if verbose
        logfilename ||= make_filename(output || File.basename(input), '.output')
        File.open(logfilename, 'w') {|f|
          Racc::LogFileGenerator.new(states).output f
        }
      }

      log_useless(states.grammar)
      log_conflict(states)
    end

    report_useless(states.grammar)
    report_conflict(states)

    profiler.report
  rescue Racc::CompileError, Errno::ENOENT, Errno::EPERM => err
    raise if $DEBUG
    lineno = err.message.slice(/\A\d+:/).to_s
    $stderr.puts "#{File.basename $0}: #{input}:#{lineno} #{err.message.strip}"
    exit 1
  end
end

def make_filename(path, suffix)
  path.sub(/(?:\..*?)?\z/, suffix)
end

def report_conflict(states)
  if states.should_report_srconflict?
    $stderr.puts "#{states.sr_conflicts.size} shift/reduce conflicts"
  end
  if states.rr_conflicts.any?
    $stderr.puts "#{states.rr_conflicts.size} reduce/reduce conflicts"
  end
end

def log_conflict(states)
  logging('w') {|f|
    f.puts "expected s/r conflicts:#{states.grammar.n_expected_srconflicts}"
    if states.should_report_srconflict?
      f.puts "s/r conflicts:#{states.sr_conflicts.size}"
    end
    if states.rr_conflicts.any?
      f.puts "r/r conflicts:#{states.rr_conflicts.size}"
    end
  }
end

def report_useless(grammar)
  if grammar.useless_nonterminals.any?
    $stderr.puts "#{grammar.useless_nonterminals.size} useless nonterminals"
  end
  if grammar.start.useless?
    $stderr.puts 'fatal: start symbol does not derive any sentence'
  end
end

def log_useless(grammar)
  logging('a') {|f|
    if grammar.useless_nonterminals.any?
      f.puts "useless nts:#{grammar.useless_nonterminals.size}"
    end
  }
end

def logging(mode, &block)
  File.open("log/#{File.basename(ARGV[0])}", mode, &block)
end

class RaccProfiler
  def initialize(really)
    @really = really
    @log = []
  end

  def section(name)
    if @really
      t1 = Process.times.utime
      result = yield
      t2 = Process.times.utime
      @log.push [name, t2 - t1]
      result
    else
      yield
    end
  end

  def report
    return unless @really
    f = $stderr
    total = cumulative_time()
    f.puts '--task-----------+--sec------+---%-'
    @log.each do |name, time|
      f.printf "%-19s %s %3d%%\n", name, pjust(time,4,4), (time/total*100).to_i
    end
    f.puts '-----------------+-----------+-----'
    f.printf "%-20s%s\n", 'total', pjust(total,4,4)
  end

  private

  def cumulative_time
    t = @log.inject(0) {|sum, (name, time)| sum + time }
    t == 0 ? 0.01 : t
  end

  def pjust(num, i, j)
    m = /(\d+)(\.\d+)?/.match(num.to_s)
    str = m[1].rjust(i)
    str.concat m[2].ljust(j+1)[0,j+1] if m[2]
    str
  end
end

main
